---
# playbook to create Amazon t2.micro instance
# using the latest Amazon build AMI

# First little play to lookup AMI id
# default we're going to look for the latest Amazon AMI on ebs volume 
# using sort and sort_end to only display latest version
- name: search ami
  hosts: localhost
  vars:
     name: "amzn-ami-hvm-*-ebs"
  tasks:
    - name: search ami tasks
      ec2_ami_find:
        name: "{{ name }}"
        architecture: "x86_64"
        virtualization_type: "hvm"
        region: "eu-west-1"
        sort: name
        sort_order: descending
        sort_end: 1
      register: ami_find

    - name: print ami_find
      debug: msg="using {{ ami_find.results[0].ami_id }} as ami_id"

# now create a ec2-key if key is not already available"
- name: create a new ec2 keypair
  hosts: localhost
  tasks:
    - name: create id984390-key
      ec2_key: name=id984390-key region=eu-west-1
      register: keypair

    - name: write key to file
      copy:
        dest: files/id984390-key.pem
        content: "{{ keypair.key.private_key }}"
        mode: 0600
      when: keypair.changed

# now let's create this image on EC2
# first make sure security groups are available
# add some tags to this image
- name: Create Amazon AMI instance on Amazon EC2
  hosts: localhost
  tasks:
    - name: create ssh security group
      ec2_group:
        name: ssh
        description: allow ssh in
        region: eu-west-1
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    - name: allow outbound connections
      ec2_group:
        name: outbound
        description: allow all outbound
        region: eu-west-1
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: start the instance
      ec2:
        image: "{{ ami_find.results[0].ami_id }}"
        region: eu-west-1
        instance_type: t2.micro
        key_name: id984390-key
        group: [ssh, outbound]
        wait: yes
        instance_tags:
          group: ansible 
          os: linux
          owner: id984390
        exact_count: 2
        count_tag: { group: ansible }
      register: ec2

    - name: Add new instance to group
      add_host: hostname="{{ item.public_ip }}" groupname=launched
      with_items: " {{ ec2.instances }}"

    - name: wait for SSH to come up
      wait_for: host="{{ item.public_dns_name }}" port=22 delay=60 timeout=320 state=started
      with_items: " {{ ec2.instances }}"

# update hosts are being booted
- name: update images
  hosts: launched
  tasks:
    - name: run yum update to update all packages
      yum: name=* state=latest
